#!/bin/bash

#! UNIQUEMENT POUR LES MACOS

#  IN DEV, ONE MUST USE .env OR CONFIG FILES OR environment variables  ===
#  IN PROD, ONE MUST USE DOCKER  ===
# Nom du r√¥le, de la base de donn√©es et du tablespace
DB_USER="ecommerce_user"
DB_NAME="ecommerce_db"
TABLESPACE_NAME="ecommerce_ts"
TABLESPACE_PATH="/Users/Shared/pgsql_tablespaces/${TABLESPACE_NAME}"

# Utilisateur actuel macOS
PG_SUPERUSER=$(whoami)

# Connexion explicite √† la base 'postgres' (toujours existante)
PG_CONNECTION="psql -U $PG_SUPERUSER -d postgres"

echo "üîç V√©rification de la version de PostgreSQL (15 recommand√©e)..."
PSQL_VERSION=$(psql --version | grep -oE '[0-9]+\.[0-9]+')
if [[ $PSQL_VERSION != 15* ]]; then
  echo "‚ö†Ô∏è  PostgreSQL $PSQL_VERSION d√©tect√©. Utilisez bien PostgreSQL 15."
  exit 1
fi

echo "üß™ V√©rification que le service PostgreSQL 15 est actif..."
brew services list | grep postgresql@15 | grep started >/dev/null
if [ $? -ne 0 ]; then
  echo "üöÄ D√©marrage du service PostgreSQL 15..."
  brew services start postgresql@15
else
  echo "‚úÖ PostgreSQL 15 d√©j√† actif."
fi

# V√©rification que la connexion fonctionne
echo "üîê V√©rification des droits du superutilisateur PostgreSQL ($PG_SUPERUSER)..."
$PG_CONNECTION -c "\q"
if [ $? -ne 0 ]; then
  echo "‚ùå Erreur : Impossible de se connecter avec l'utilisateur '$PG_SUPERUSER' √† la base 'postgres'."
  echo "üí° Conseil : Assurez-vous que le r√¥le '$PG_SUPERUSER' existe dans PostgreSQL ou connectez-vous avec un superutilisateur valide."
  exit 1
fi

# Cr√©ation du r√¥le s'il n'existe pas
echo "üë§ V√©rification ou cr√©ation du r√¥le PostgreSQL '${DB_USER}'..."
ROLE_EXISTS=$($PG_CONNECTION -tAc "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}'")
if [ "$ROLE_EXISTS" = "1" ]; then
  echo "‚ÑπÔ∏è  Le r√¥le '${DB_USER}' existe d√©j√†."
else
  $PG_CONNECTION -c "CREATE ROLE ${DB_USER} WITH LOGIN PASSWORD 'password';"
  $PG_CONNECTION -c "ALTER ROLE ${DB_USER} CREATEDB;"
fi

# Cr√©ation de la base de donn√©es si elle n'existe pas
echo "üóÇ Cr√©ation de la base de donn√©es '${DB_NAME}'..."
DB_EXISTS=$($PG_CONNECTION -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'")
if [ "$DB_EXISTS" = "1" ]; then
  echo "‚ÑπÔ∏è  La base de donn√©es '${DB_NAME}' existe d√©j√†."
else
  $PG_CONNECTION -c "CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};"
fi

# Cr√©ation du r√©pertoire de tablespace
echo "üìÅ V√©rification du r√©pertoire de tablespace..."
if [ ! -d "${TABLESPACE_PATH}" ]; then
  sudo mkdir -p "${TABLESPACE_PATH}"
  sudo chown "$(whoami)" "${TABLESPACE_PATH}"
  echo "‚úÖ R√©pertoire '${TABLESPACE_PATH}' cr√©√©."
else
  echo "‚ÑπÔ∏è  Le r√©pertoire '${TABLESPACE_PATH}' existe d√©j√†."
fi

# Cr√©ation du tablespace PostgreSQL
echo "üõ† Cr√©ation du tablespace PostgreSQL '${TABLESPACE_NAME}'..."
TABLESPACE_EXISTS=$($PG_CONNECTION -tAc "SELECT 1 FROM pg_tablespace WHERE spcname = '${TABLESPACE_NAME}'")
if [ "$TABLESPACE_EXISTS" = "1" ]; then
  echo "‚ÑπÔ∏è  Le tablespace '${TABLESPACE_NAME}' existe d√©j√†."
else
  $PG_CONNECTION -c "CREATE TABLESPACE ${TABLESPACE_NAME} LOCATION '${TABLESPACE_PATH}';"
fi

# Connexion de test √† la base avec le nouvel utilisateur
echo "‚úÖ Connexion √† la base '${DB_NAME}' avec l'utilisateur '${DB_USER}'..."
psql -U "${DB_USER}" -d "${DB_NAME}" -c "\l"
if [ $? -ne 0 ]; then
  echo "‚ùå √âchec de la connexion avec '${DB_USER}' √† la base '${DB_NAME}'."
  echo "üí° V√©rifiez que le mot de passe ou les droits sont corrects."
  exit 1
fi

echo "üéâ Script termin√© avec succ√®s."